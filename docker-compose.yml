version: '3.8'

services:
  db:
    image: ankane/pgvector:latest
    container_name: sp500_rag_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  backend:
    build: ./backend
    container_name: sp500_rag_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    # Add extra_hosts to make host.docker.internal work on all platforms
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - APP_MODE=${APP_MODE}
      # Embedding configuration (used for BOTH documents and queries)
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - EMBEDDING_DIMENSION=${EMBEDDING_DIMENSION}
      # Chat configuration (used ONLY for final answer generation)
      - CHAT_PROVIDER=${CHAT_PROVIDER}
      - CHAT_MODEL=${CHAT_MODEL}
      # API keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./backend:/app
      # Mount the CSV in multiple locations to ensure it's found
      - ./companies_to_import.csv:/data/companies_to_import.csv
      - ./companies_to_import.csv:/companies_to_import.csv
    depends_on:
      db:
        condition: service_healthy
  
  frontend:
    build: ./frontend
    container_name: sp500_rag_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Use host.docker.internal to reach the host machine from inside the container
      - REACT_APP_API_URL=http://host.docker.internal:8000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend

volumes:
  postgres_data:
